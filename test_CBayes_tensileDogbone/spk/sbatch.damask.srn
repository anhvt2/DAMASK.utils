#!/bin/bash
## Do not put any commands or blank lines before the #SBATCH lines
#SBATCH --nodes=1                     # Number of nodes - all cores per node are allocated to the job
#SBATCH --time=96:00:00               # Wall clock time (HH:MM:SS) - once the job exceeds this time, the job will be terminated (default is 5 minutes)
#SBATCH --account=FY140174            # WC ID
#SBATCH --job-name=cpfem              # Name of job
#SBATCH --partition=batch             # partition/queue name: short or batch
    #            short: 4hrs wallclock limit
    #            batch: nodes reserved for > 4hrs (default)
#SBATCH --qos=long                    # Quality of Service: long, large, priority or normal
    #           normal: request up to 48hrs wallclock (default)
    #           long:   request up to 96hrs wallclock and no larger than 64nodes
    #           large:  greater than 50% of cluster (special request)
    #           priority: High priority jobs (special request)


source ~/.bashrc
# ---------------------------------- set SRN modules
## compatible with DAMASK-2.0.2
module load gnu/13.1.1
module load openmpi-gnu/4.1

# module load gnu/10.2.1
# module load openmpi-gnu/4.1
# module load tce
# module load python/3.6.0

# ---------------------------------- set DAMASK variables
# export PETSC_DIR=/ascldap/users/anhtran/data/local/petsc-3.9.4
export PETSC_DIR=/ascldap/users/anhtran/local/petsc-3.9.4 # DAMASK-2.0.2
# export PETSC_DIR=/ascldap/users/anhtran/local/petsc-3.10.5 # no longer at /data/ -- damask-2.0.3
# export PETSC_DIR=/ascldap/users/anhtran/local/petsc-3.13.6 # DAMASK-3.0.0-alpha
export PETSC_ARCH=arch-linux2-c-opt # could be arch-linux2-c-debug
# export DAMASK_ROOT=/ascldap/users/anhtran/data/DAMASK/DAMASK-2.0.2
export DAMASK_ROOT=/ascldap/users/anhtran/data/DAMASK/DAMASK-2.0.2
# export DAMASK_ROOT=/ascldap/users/anhtran/data/DAMASK/damask-3.0.0-alpha
export DAMASK_spectral=$DAMASK_ROOT/bin/DAMASK_spectral

source /ascldap/users/anhtran/data/DAMASK/DAMASK-2.0.2/DAMASK_env.sh
# source /ascldap/users/anhtran/data/DAMASK/damask-3.0.0-alpha/env/DAMASK.sh

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo "Start running simulation at"
echo $(date +%y-%m-%d-%H-%M-%S)

### ---------------------------------- pre-set on Solo

nodes=$SLURM_JOB_NUM_NODES           # Number of nodes - the number of nodes you have requested (for a list of SLURM environment variables see "man sbatch")
cores=$(( $(nproc)/2  ))             # Number MPI processes to run on each node (a.k.a. PPN)
                                                                         # CTS1 has 36 cores per node
### ---------------------------------- run DAMASK

geomFileName='main'
loadFileName='tension'
rm -fv ${geomFileName}_${loadFileName}.*

if [ -f "numProcessors.dat" ]; then
    numProcessors=$(cat numProcessors.dat)
	echo "Using numProcessors.dat"
    if [[ "$numProcessors" -eq 1 ]]; then
        $DAMASK_spectral --geom ${geomFileName}.geom --load tension.load 2>&1 > log.damask
    else
        mpirun -np ${numProcessors} $DAMASK_spectral --geom ${geomFileName}.geom --load tension.load 2>&1 > log.damask
    fi
else
    # mpirun -np ${cores} $DAMASK_spectral --geom ${geomFileName}.geom --load tension.load 2>&1 > log.damask
	# export DAMASK_NUM_THREADS=3
    # mpirun -np 10 $DAMASK_spectral --geom ${geomFileName}.geom --load tension.load 2>&1 > log.damask
    # mpirun -np 16 $DAMASK_spectral --geom ${geomFileName}.geom --load tension.load 2>&1 > log.damask
	# mpiexec --bind-to core --npernode $cores --n $(($cores*$nodes)) $DAMASK_spectral --geom ${geomFileName}.geom --load tension.load 2>&1 > log.damask
	# mpirun -np 125 $DAMASK_spectral --geom ${geomFileName}.geom --load tension.load 2>&1 > log.damask
	# mpiexec --bind-to core --npernode 10 --n 5 $DAMASK_spectral --geom ${geomFileName}.geom --load tension.load 2>&1 > log.damask
    mpiexec --bind-to package -np 125 $DAMASK_spectral --geom ${geomFileName}.geom --load tension.load 2>&1 > log.damask
fi


### ---------------------------------- post-processing DAMASK
sleep 10

# Global: Homogenization
# python3 ../../findGaugeLocations.py --geom ${geomFileName}.geom # dump gaugeFilter.txt
postResults *.spectralOut --cr f,p --filter $(cat gaugeFilter.txt)
cd postProc/
addStrainTensors ${geomFileName}_${loadFileName}.txt --left --logarithmic
addCauchy ${geomFileName}_${loadFileName}.txt
addMises ${geomFileName}_${loadFileName}.txt --strain 'ln(V)' --stress Cauchy
filterTable < ${geomFileName}_${loadFileName}.txt --white inc,'Mises(ln(V))','Mises(Cauchy)' > stress_strain.log
cd ..


# ### Local
# postResults \
#     --cr fp,f,p,grainrotation,texture \
#     --split \
#     --separation x,y,z \
#     --increments \
#     --range 1 40 1 ${geomFileName}_${loadFileName}.spectralOut 2>&1 > log.postResults

# cd postProc
# for fileName in $(ls -1v ${geomFileName}_${loadFileName}*.txt); do
#     fileName=$(echo ${fileName} | rev | cut -c 5- | rev)
# 	# fileName=$(echo ${fileName} | cut -d. -f1) # deprecated

# 	addStrainTensors -0 -v ${fileName}.txt
# 	addCauchy ${fileName}.txt
# 	addMises -s Cauchy ${fileName}.txt
# 	addStrainTensors --left --logarithmic ${fileName}.txt
# 	addMises -e 'ln(V)' ${fileName}.txt
# 	addDisplacement --nodal ${fileName}.txt

# 	vtk_rectilinearGrid ${fileName}.txt

# 	vtk_addRectilinearGridData \
# 	 --inplace \
# 	 --data '1_fp','2_fp','3_fp','4_fp','5_fp','6_fp','7_fp','8_fp','9_fp','1_f','2_f','3_f','4_f','5_f','6_f','7_f','8_f','9_f','1_p','2_p','3_p','4_p','5_p','6_p','7_p','8_p','9_p','1_eulerangles','2_eulerangles','3_eulerangles','1_grainrotation','2_grainrotation','3_grainrotation','4_grainrotation','texture','1_ln(V)','2_ln(V)','3_ln(V)','4_ln(V)','5_ln(V)','6_ln(V)','7_ln(V)','8_ln(V)','9_ln(V)','1_Cauchy','2_Cauchy','3_Cauchy','4_Cauchy','5_Cauchy','6_Cauchy','7_Cauchy','8_Cauchy','9_Cauchy','Mises(Cauchy)','1_ln(V)','2_ln(V)','3_ln(V)','4_ln(V)','5_ln(V)','6_ln(V)','7_ln(V)','8_ln(V)','9_ln(V)','Mises(ln(V))' \
# 	 --vtk "${fileName}_pos(cell).vtr" \
# 	 ${fileName}.txt

	echo "done processing ${fileName}."
done

# echo "Simulation does not converge!!!"
# echo 0 > feasible.dat
# echo 1 > complete.dat


echo "<<<<<<<<<<<<<<<<<<<<<<<<<<<"
echo "Stop running simulation at"
echo $(date +%y-%m-%d-%H-%M-%S)
echo "from :"
echo $(pwd)
echo
