
import numpy as np
import glob, os, sys, time
from natsort import natsorted, ns # natural-sort
import pyvista
import argparse

'''
This script pads air in the Y-direction to break periodicity for dogbone tensile bar.

Example
-------
python3 padAirPolycrystals.py \
    --origGeomFileName spk_dump_12_out.geom
# dump 'padded_spk_dump_12_out.geom'

Parameters
----------
-g or --origGeomFileName: original .geom file without air padded

Return
------
padded + origGeomFileName: padded .geom file
'''

def delete(lst, to_delete):
    '''
    Recursively delete an element with content described by  'to_delete' variable
    https://stackoverflow.com/questions/53265275/deleting-a-value-from-a-list-using-recursion/
    Parameter
    ---------
    to_delete: content needs removing
    lst: list
    Return
    ------
    a list without to_delete element
    '''
    return [element for element in lst if element != to_delete]

def geom2npy(fileName):
    '''
    Read a .geom file and return a numpy array with meta-data
    '''
    fileHandler = open(fileName)
    txt = fileHandler.readlines()
    fileHandler.close()
    numSkippingLines = int(txt[0].split(' ')[0])+1 
    # Search for 'size' within header:
    for j in range(numSkippingLines):
        if 'grid' in txt[j]:
            cleanString = delete(txt[j].replace('\n', '').split(' '), '')
            Nx_grid = int(cleanString[2])
            Ny_grid = int(cleanString[4])
            Nz_grid = int(cleanString[6])
        if 'size' in txt[j]:
            cleanString = delete(txt[j].replace('\n', '').split(' '), '')
            Nx_size = float(cleanString[2])
            Ny_size = float(cleanString[4])
            Nz_size = float(cleanString[6])
    #
    geomBlock = txt[numSkippingLines:]
    geom = ''
    for i in range(len(geomBlock)):
        geom += geomBlock[i]
    #
    geom = geom.split(' ')
    geom = list(filter(('').__ne__, geom))
    geom = np.array(geom, dtype=int).reshape(Nz_grid, Ny_grid, Nx_grid).T
    headers = txt[:numSkippingLines] # also return headers
    return Nx_grid, Ny_grid, Nz_grid, Nx_size, Ny_size, Nz_size, geom, headers

parser = argparse.ArgumentParser(description='')
parser.add_argument("-g", "--origGeomFileName", help='original geom fileName', type=str, required=True)
parser.add_argument("-numAirVoxels", "--numAirVoxels", help='number of air voxels to break PBC', type=int, required=False, default=2)
args = parser.parse_args()
origGeomFileName = args.origGeomFileName # e.g. 'singleCrystal_res_50um.geom'
numAirVoxels = args.numAirVoxels # default = 2, for MF-ROM set = 4

paddedGeomFileName = 'padded_' + origGeomFileName
Nx_grid, Ny_grid, Nz_grid, Nx_size, Ny_size, Nz_size, origGeom, headers = geom2npy(origGeomFileName)

# Create paddedGeom with air
# numAirVoxels = 2 # number of air voxels on each side
paddedGeom = np.ones([Nx_grid, Ny_grid+2*numAirVoxels, Nz_grid]) # assume void id = 1
paddedGeom[:, numAirVoxels:Ny_grid+numAirVoxels] = origGeom # copy original geom

# Convert 3d numpy array to 1d flatten array
paddedGeom = paddedGeom.T.flatten()

# Write paddedGeom output
num_lines = int(np.floor(len(paddedGeom)) / 10)
num_elems_last_line = int(len(paddedGeom) % 10)

f = open(paddedGeomFileName, 'w')
f.write('6       header\n')
f.write('# Generated by padAirPolycrystals.py\n')
f.write('grid    a %d      b %d      c %d\n'       % (Nx_grid, Ny_grid+2*numAirVoxels, Nz_grid))
f.write('size    x %.0f    y %.0f    z %.0f\n' % (Nx_size, Ny_size+2*numAirVoxels*Ny_size/Ny_grid, Nz_size))
f.write('origin  x 0.000    y 0.000    z 0.000\n')
f.write('homogenization  1\n')
f.write('microstructures %d\n' % paddedGeom.max().astype(int))

for j in range(int(num_lines)):
    for k in range(10):
        idx = int(j*10 + k)
        f.write('%10d' % int(paddedGeom[idx]))
    f.write('\n')

if num_elems_last_line > 0:
    for idx in range(-num_elems_last_line,0):
        f.write('%10d' % int(paddedGeom[idx]))

f.close()
