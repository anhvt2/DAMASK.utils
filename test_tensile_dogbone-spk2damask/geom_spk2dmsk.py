

"""
	How to use: 
		python3 geom_spk2dmsk.py -r 50 -d 'dump.12.out'

	Parameters:
		-r: resolution: 1 pixel to 'r' micrometer
		-d: dump file from SPPARKS

	Description:
		This script converts a microstructure SPPARKS output (dump file)
		to a geom DAMASK input file. This script is to be used in concert with
			1. `geom_cad2phase.py` to model void,
			2. and `orientations.txt` generated from DREAM.3D for crystallographic texture
"""

import numpy as np
import os, sys, time
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("-d", "--dump", type=str, required=True)
parser.add_argument("-r", "--resolution", type=int, required=True)
args = parser.parse_args()
dumpFileName = args.dump # 'dump.12.out'
outFileName = 'spk_' + dumpFileName.replace('.','_') + '.geom'
res = args.resolution

def getDumpMs(dumpFileName):
	"""
		This function return a 3d array 'm' microstructure from reading a SPPARKS dump file, specified by 'dumpFileName'.
	"""
	dumpFile = open(dumpFileName)
	dumptxt = dumpFile.readlines()
	dumpFile.close()
	for i in range(20): # look for header info in first 20 lines
		tmp = dumptxt[i]
		if 'BOX BOUNDS' in tmp:
			Nx = int(dumptxt[i+1].replace('\n','').replace('0 ', '').replace(' ', ''))
			Ny = int(dumptxt[i+2].replace('\n','').replace('0 ', '').replace(' ', ''))
			Nz = int(dumptxt[i+3].replace('\n','').replace('0 ', '').replace(' ', ''))
			break
	header = np.array(dumptxt[i+4].replace('\n','').replace('ITEM: ATOMS ', '').split(' '), dtype=str)
	d = np.loadtxt(dumpFileName, skiprows=9, dtype=int)
	num_grains = len(np.unique(d[:,1]))
	old_grain_ids = np.unique(d[:,1])
	new_grain_ids = range(len(np.unique(d[:,1])))
	m = np.zeros([Nx, Ny, Nz]) # initialize
	for ii in range(len(d)):
		i = int(d[ii,np.where(header=='x')[0][0]]) # 'x'
		j = int(d[ii,np.where(header=='y')[0][0]]) # 'y'
		k = int(d[ii,np.where(header=='z')[0][0]]) # 'z'
		grain_id = int(d[ii,1]) # or d[i,2] -- both are the same
		# option: DO re-enumerating
		lookup_idx = np.where(old_grain_ids == grain_id)[0][0]
		new_grain_id = new_grain_ids[lookup_idx]
		m[i,j,k] = new_grain_id
		# option: DO NOT re-enumerating
		# m[i,j,k] = grain_id # TODO: implement re-enumerate grain_id
		# print(f"finish ({x},{y}, {z})")
	return m, Nx, Ny, Nz, num_grains

t_start = time()
m, Nx, Ny, Nz, num_grains = getDumpMs(dumpFileName)

p = np.load('phase_' + dumpFileName.replace('.','_') + '.npy') # output from geom_cad2phase.py
# void_id = np.max(m) + 1
# void_id = np.inf # DAMASK pre-proc error 
# void_id = -1
void_id = 1 # based on Philip Eisenlohr's suggestion

for i in range(Nx):
	for j in range(Ny):
		for k in range(Nz):
			if p[i,j,k] == np.inf:
				m[i,j,k] = void_id # assign void

np.save('m_' + dumpFileName.replace('.','_') + '.npy', m)

geom = m.T.flatten()
geom = np.array(geom, dtype=int)

### write .geom output
num_lines = int(np.floor(len(geom)) / 10)
num_elems_last_line = int(len(geom) % 10)

f = open(outFileName, 'w')
f.write('6       header\n')
f.write('# Generated by geom_spk2dmsk.py\n')
f.write('grid    a %d    b %d    c %d\n' % (Nx, Ny, Nz))
f.write('size    x %.3f    y %.3f    z %.3f\n' % (Nx*res, Ny*res, Nz*res))
f.write('origin    x 0.000    y 0.000    z 0.000\n')
f.write('homogenization  1\n')
f.write('microstructures %d\n' % (num_grains+1))

for j in range(int(num_lines)):
	for k in range(10):
		idx = int(j * 10 + k)
		f.write('%10d' % int(geom[idx]+1)) # grain index starts from 1
	f.write('\n')

if num_elems_last_line > 0:
	for idx in range(-num_elems_last_line,0):
		f.write('%10d' % int(geom[idx]+1)) # grain index starts from 1

f.close()

###
orientations = np.loadtxt('orientations.dat')
outFileName = 'material.config'
f = open(outFileName, 'w')

f.write('#############################################################################\n')
f.write('# Generated by geom_spk2dmsk.py\n')
f.write('#############################################################################\n')
f.write('# Add <homogenization>, <crystallite>, and <phase> for a complete definition\n')
f.write('#############################################################################\n')
f.write('<texture>\n')

### NOTE:
# if void_id = 1, then grain ids translate to (i+2)
# if void_id = num_grains, then grain ids translate to (i+1)

f.write('[grain%d]\n' % (void_id))
f.write('(gauss) phi1 0   Phi 0    phi2 0   scatter 0.0   fraction 1.0 \n')

for i in range(num_grains):
	f.write('[grain%d]\n' % (i+2)) # assign grain id
	phi1, Phi, phi2 = orientations[i,:]
	f.write('(gauss) phi1 %.3f   Phi %.3f    phi2 %.3f   scatter 0.0   fraction 1.0 \n' % (phi1, Phi, phi2))

f.write('\n')
f.write('<microstructure>\n')

f.write('[grain%d]\n' % (void_id))
f.write('crystallite 1\n')
f.write('(constituent)   phase 2 texture %d fraction 1.0\n' % void_id)

for i in range(num_grains):
	f.write('[grain%d]\n' % (i+2)) # assign grain id
	f.write('crystallite 1\n')
	f.write('(constituent)   phase 1 texture %d fraction 1.0\n' % (i+2)) # assign grain id


f.close()

### diagnostics
print(f"Number of unique grains = {num_grains}")
elapsed = time.time() - t_start
print("geom_spk2dmsk.py: finished in {:5.2f} seconds.".format(elapsed), end="")