

"""
	How to use: 
		python3 geom_spk2dmsk.py -r 50 -d 'dump.12.out'

	Parameters:
		-r: resolution: 1 pixel to 'r' micrometer
		-d: dump file from SPPARKS

	Description:
		This script converts a microstructure SPPARKS output (dump file)
		to a geom DAMASK input file. This script is to be used in concert with
			1. `geom_cad2phase.py` to model void,
			2. and `orientations.txt` generated from DREAM.3D for crystallographic texture
"""

import numpy as np
import os, sys
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("-d", "--dump", type=str, required=True)
parser.add_argument("-r", "--resolution", type=int, required=True)
args = parser.parse_args()
dumpFileName = args.dump # 'dump.12.out'
outFileName = 'spk_' + dumpFileName.replace('.','_') + '.geom'
res = args.resolution

def getDumpMs(dumpFileName):
	"""
		This function return a 3d array 'm' microstructure from reading a SPPARKS dump file, specified by 'dumpFileName'.
	"""
	dumpFile = open(dumpFileName)
	dumptxt = dumpFile.readlines()
	dumpFile.close()
	for i in range(20): # look for header info in first 20 lines
		tmp = dumptxt[i]
		if 'BOX BOUNDS' in tmp:
			Nx = int(dumptxt[i+1].replace('\n','').replace('0 ', '').replace(' ', ''))
			Ny = int(dumptxt[i+2].replace('\n','').replace('0 ', '').replace(' ', ''))
			Nz = int(dumptxt[i+3].replace('\n','').replace('0 ', '').replace(' ', ''))
			break
	header = np.array(dumptxt[i+4].replace('\n','').replace('ITEM: ATOMS ', '').split(' '), dtype=str)
	d = np.loadtxt(dumpFileName, skiprows=9, dtype=int)
	num_grains = len(np.unique(d[:,1]))
	m = np.zeros([Nx, Ny, Nz])
	for ii in range(len(d)):
		i = int(d[ii,np.where(header=='x')[0][0]]) # 'x'
		j = int(d[ii,np.where(header=='y')[0][0]]) # 'y'
		k = int(d[ii,np.where(header=='z')[0][0]]) # 'z'
		grain_id = int(d[ii,1]) # or d[i,2] -- both are the same
		m[i,j,k] = grain_id
		# print(f"finish ({x},{y}, {z})")
	return m, Nx, Ny, Nz, num_grains

m, Nx, Ny, Nz, num_grains = getDumpMs(dumpFileName)

p = np.load('phase_' + dumpFileName.replace('.','_') + '.npy') # output from geom_cad2phase.py
void_id = np.max(m) + 1

for i in range(Nx):
	for j in range(Ny):
		for k in range(Nz):
			if p[i,j,k] == np.inf:
				m[i,j,k] = void_id # assign void

geom = m.T.flatten()
geom = np.array(geom, dtype=int)

# write output
num_lines = int(np.floor(len(geom)) / 10)
num_elems_last_line = int(len(geom) % 10)

f = open(outFileName, 'w')
f.write('6       header\n')
f.write('# Generated by geom_spk2dmsk.py\n')
f.write('grid    a %d    b %d    c %d\n' % (Nx, Ny, Nz))
f.write('size    x %.3f    y %.3f    z %.3f\n' % (Nx*res, Ny*res, Nz*res))
f.write('origin    x 0.000    y 0.000    z 0.000\n')
f.write('homogenization  1\n')
f.write('microstructures %d\n' % num_grains)

for j in range(int(num_lines)):
	for k in range(10):
		idx = int(j * 10 + k)
		f.write('%10d' % int(geom[idx]))
	f.write('\n')

if num_elems_last_line > 0:
	for idx in range(-num_elems_last_line,0):
		f.write('%10d' % int(geom[idx]))

f.close()

# diagnostics
print(f"Number of unique grains = {num_grains}")
