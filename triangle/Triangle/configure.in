dnl
dnl SECTION: Initialization
dnl
AC_INIT(src/triangle.c)
AC_PREREQ(2.13)
AC_REVISION($Id: configure.in,v 1.0 2001/03/02 18:20:57 knepley Exp $)dnl
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(include/config.h)
AM_INIT_AUTOMAKE(triangle, 1.0)
dnl
dnl SECTION: Installation
dnl
AC_LANG_C
dnl  Turn off printing tests to screen (but allow them as an option)
AC_ARG_ENABLE(print-tests, [  --enable-print-tests    turn on configure-style printing of tests],
              print_tests=$enableval, print_tests=no)
AC_ARG_ENABLE(echo, [  --enable-echo           turn on strong echoing], set -x)
dnl By default, Triangle and Show Me use double precision floating point
dnl numbers.  If you prefer single precision, use the -DSINGLE switch.
dnl Double precision uses more memory, but improves the resolution of
dnl the meshes you can generate with Triangle.  It also reduces the
dnl likelihood of a floating exception due to overflow.  Also, it is
dnl much faster than single precision on 64-bit architectures like the
dnl DEC Alpha.  I recommend double precision unless you want to generate
dnl a mesh for which you do not have enough memory to use double precision.
AC_ARG_ENABLE(single, [  --enable-single         use single precision], EXTRA_CFLAGS="$EXTRA_CFLAGS -DSINGLE")
dnl  If you are modifying Triangle, I recommend using the -DSELF_CHECK switch
dnl  while you are debugging.  Defining the SELF_CHECK symbol causes
dnl  Triangle to include self-checking code.  Triangle will execute more
dnl  slowly, however, so be sure to remove this switch before compiling a
dnl  production version.
AC_ARG_ENABLE(selfcheck, [  --enable-selfcheck      use internal debugging], EXTRA_CFLAGS="$EXTRA_CFLAGS -DSELF_CHECK")
dnl The -DCDT_ONLY switch gets rid of all meshing algorithms above and beyond
dnl constrained Delaunay triangulation.  Specifically, defining the CDT_ONLY
dnl symbol eliminates the -r, -q, -a, -S, and -s switches.
AC_ARG_ENABLE(algorithms, [  --disable-algorithms    use only constrained Delaunay],
[if test "$enableval" = "no"; then
  EXTRA_CFLAGS="$EXTRA_CFLAGS -DCDT_ONLY"
fi])
dnl If the size of the Triangle binary is important to you, you may wish to
dnl generate a reduced version of Triangle.  The -DREDUCED switch gets rid
dnl of all features that are primarily of research interest.  Specifically,
dnl defining the REDUCED symbol eliminates the -i, -F, -s, and -C switches.
AC_ARG_ENABLE(reduced, [  --enable-reduced        use reduced memory ], EXTRA_CFLAGS="$EXTRA_CFLAGS -DREDUCED")
dnl Remove Petsc symbols if we are not linking with it directly
AC_ARG_ENABLE(petsc-malloc, [  --disable-petsc-malloc    use standard malloc],
[if test "$enableval" = "no"; then
  EXTRA_CFLAGS="$EXTRA_CFLAGS -DNO_PETSC_MALLOC"
fi])
dnl
dnl SECTION: Programs
dnl
AC_LIBTOOL_DLOPEN
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_ARG_WITH(cc, [  --with-cc=C_compiler    choose the C compiler], CC="$withval")
dnl This checks preferentially for gcc. To change, set CC
AC_PROG_CC
if test "$USE_GNU" != "yes" ; then
    AC_CHECK_PROGS(CXX, xlC pgCC c++ CC cxx cc++ cl, gcc)
fi 
AC_PROG_GCC_TRADITIONAL
dnl
dnl SECTION: Libraries
dnl
AC_CHECK_LIB(m, sin)
dnl
dnl SECTION: Header files
dnl
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(sys/time.h, , EXTRA_CFLAGS="$EXTRA_CFLAGS -DNO_TIMER")
dnl
dnl SECTION: Typedefs
dnl
dnl
dnl SECTION: Structures
dnl
dnl
dnl SECTION: Compiler characteristics
dnl
dnl
dnl SECTION: Library functions
dnl
AC_CHECK_FUNCS(gettimeofday strtod strtol)
dnl
dnl SECTION: System services
dnl
AC_PATH_XTRA
if test -z "$no_x" ; then
    LIBS="$LIBS $X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
fi

AC_SUBST(EXTRA_CFLAGS)
AC_OUTPUT(Makefile src/Makefile)
