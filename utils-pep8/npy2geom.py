#!/usr/bin/env python3

import numpy as np
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-npy", "--npy", type=str, required=True)
args = parser.parse_args()

npyFileName = args.npy
geomFileName = npyFileName[:-4] + '.geom'

geom = np.load(npyFileName)
Nx, Ny, Nz = geom.shape

defaultHeaders = ['6       header\n',
                  '# Generated by geom_spk2dmsk.py\n',
                  'grid    a %d    b %d    c %d\n' % (Nx, Ny, Nz),
                  'size    x %d    y %d    z %d\n' % (Nx, Ny, Nz),
                  'origin    x 0.000    y 0.000    z 0.000\n',
                  'homogenization  1\n',
                  'microstructures %d\n' % np.max(geom)]


def writeGeom(geomFileName, geom, headers=defaultHeaders):
    """
    Parameters
    ----------
    - geomFileName: output file
    - geom (np.ndarray): 3D numpy array to be saved
    - complete headers for geom (no sanity check)
    Returns
    -------
    .geom file written in geomFileName
    """
    geom = geom.T.flatten()

    f = open(geomFileName, 'w')

    # write headers
    for i in range(len(headers)):
        f.write(headers[i])

    # write geom output
    num_lines = int(np.floor(len(geom)) / 10)
    num_elems_last_line = int(len(geom) % 10)

    for j in range(int(num_lines)):
        for k in range(10):
            idx = int(j*10 + k)
            f.write('%10d' % int(geom[idx]))
        f.write('\n')

    if num_elems_last_line > 0:
        for idx in range(-num_elems_last_line, 0):
            f.write('%10d' % int(geom[idx]))

    f.close()


writeGeom(geomFileName, geom, defaultHeaders)
